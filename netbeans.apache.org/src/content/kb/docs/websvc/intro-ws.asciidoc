// 
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

= Introduction to Web Services
:jbake-type: tutorial
:jbake-tags: tutorials 
:jbake-status: published
:icons: font
:syntax: true
:source-highlighter: pygments
:toc: left
:toc-title:
:description: Introduction to Web Services - Apache NetBeans
:keywords: Apache NetBeans, Tutorials, Introduction to Web Services

This is an introduction to web service concepts and technologies and their support within Apache NetBeans IDE. It is meant to help newcomers to web services before they use any tutorials. 

Web services are distributed application components that are externally available (via interface). Externally means that you can access them remotely typically based on common internet protocols (such as HTTP). You can use them to integrate applications that are written in different languages and run-on different platforms. Web services are language and platform independent because vendors have agreed on common web standards. 

Hence, there are a lot of frameworks which enable web service development and consumption across all modern programming languages. Because web services are used widely and independent of platforms, there is also a need to standardize interface description. Amongst others, three common approaches to interface description are link:https://www.openapis.org/[OpenAPI], link:https://www.w3.org/Submission/wadl/[WADL], and link:https://www.w3.org/TR/wsdl20/[WSDL].

Several programming models are available to web service developers. These models fall into two major categories, both supported by the IDE:

* *REST*: **RE**presentational **S**tate **T**ransfer is the currently the most common way to create web services. In REST, resources have URIs and are manipulated through HTTP methods. For more details, see <<rest,RESTful Web Services>>.
* *SOAP*: In traditional web service models, web service interfaces are exposed through WSDL documents (a type of XML), which have URLs. Subsequent message exchange is in SOAP, another type of XML document. For more details, see <<jaxws,SOAP-based Web Services>>.


== RESTful Web Services

REST-based (or *RESTful*) web services are collections of web resources. In terms of REST, objects are understood as *resources* that are uniquely identified via an *URI* (*Unified Resource Identifier*) and represented in different formats (such as text, image, audio, video, application). Communication is established via *HTTP methods* (most common are *GET*, *POST*, *PUT*, *DELETE*). By implementing these common HTTP methods a *CRUD* (**C**reate **R**ead **U**pdate **D**elete) interface is created by the RESTful service. Therefore, no further protocol layer, such as SOAP, is necessary. For communication messages different formats can be used. A quite common choice is *JSON* (*JavaScript Object Notation*). 

In the context of web services, this means that a component which implements a web service that uses a REST binding (a so-called RESTful web service) is to be understood as follows:

* An object/data set is hidden behind the endpoint URI.
* The object can be processed programmatically by the typical HTTP verbs (GET, POST, ...)
* The messages (request and response) can be defined in any format, often JSON is used.

REST services are the most common web service type. Almost all large companies and projects provide REST APIs, such as Flickr, Google Maps and Amazon. Apache NetBeans IDE Software as a Service (SaaS) functionality lets you use Facebook, Zillow, and other third-party-provided services in your own applications.

=== Jakarta RESTful Web Services
Jakarta RESTful Web Services is part of Jakarta EE specifications and provides descriptions and APIs to develop RESTful web services as well as clients. Jakarta RESTful Web Services provide an annotation-based API to expose Java POJOs as RESTful web services. The corresponding implementation and APIs are called JAX-RS. Following web service standards, clients implemented by means of JAX-RSare not restricted to services implemented using JAX-RS. 

The open source reference implementation for building RESTful web services in Java is link:https://eclipse-ee4j.github.io/jersey/[+Project Jersey+] . The Jersey APIs are available as the "RESTful Web Services" plugin for Apache NetBeans IDE. This plugin will also be activated once you create your first Jakarta EE project.

=== Further Reading & Resources 

* link:https://eclipse-ee4j.github.io/jaxrs-api/apidocs/3.0.0/[JAX-RS API]
* link:https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html[Jakarta RESTful Web Services]

The following tutorials involve creating and consuming REST services:

* link:./rest.html[+Getting Started with RESTful Web Services+]
* link:./zillow.html[+SaaS: Zillow+]


==  SOAP-based Web Services

In SOAP-based web services, Java utilities create a WSDL file based on the Java code in the web service. The WSDL is exposed on the net. Parties interested in using the web service create a Java client based on the WSDL. Messages are exchanged in SOAP format. The range of operations that can be passed in SOAP is much broader than what is available in REST, especially in security.

SOAP-based web services are suitable for heavyweight applications using complicated operations and for applications requiring sophisticated security, reliability or other WS-* standards-supported features. They are also suitable when a transport protocol other than HTTP has to be used. Many of Amazon's web services, particularly those involving commercial transactions, and the web services used by banks and government agencies are SOAP-based.

The Java API for XML Web Services (JAX-WS) is the current model for SOAP-based web services in Metro. JAX-WS is built on the earlier JAX-RPC model but uses specific Java EE features, such as annotations, to simplify the task of developing web services. Because it uses SOAP for messaging, JAX-WS is transport neutral. It also supports a wide range of modular WS-* specifications, such as WS-Security and WS-ReliableMessaging.

When you create a web service client, you have the option of using either the JAX-WS or JAX-RPC model. This is because some older JAX-RPC services use a binding style that is not supported by JAX-WS. These services can only be consumed by JAX-RPC clients.

=== Further Reading & Resources

The following tutorials involve creating and consuming JAX-WS SOAP-based web services:

* link:./jax-ws.html[+Getting Started with JAX-WS Web Services+]
* link:./client.html[+Developing JAX-WS Web Service Clients+]
* link:./flower_overview.html[+Web Service Passing Binary Data+] - a separate learning trail about using web services to pass binary data which are displayed in a client using Swing components
* link:./wsit.html[+Advanced Web Service Interoperability+] (demonstrates WSIT)

== Comparison between REST and SOAP
