// 
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

= NetBeans IDE Java Quick Start Tutorial
:jbake-type: tutorial
:jbake-tags: tutorials 
:jbake-status: published
:syntax: true
:source-highlighter: pygments
:toc: left
:toc-title:
:description: NetBeans IDE Java Quick Start Tutorial - Apache NetBeans
:keywords: Apache NetBeans, Tutorials, NetBeans IDE Java Quick Start Tutorial

== Java Quick Start Tutorial

Welcome to Apache NetBeans IDE!

In this tutorial, which should take about 10 minutes to complete, you are given a simple and quick introduction to the Apache NetBeans IDE workflow, consisting of the creation of a simple "Hello World" Java application. 

=== Setting Up the Project 

Take the steps below to set up a new Java project.

1. In the IDE, choose File > New Project or click the "New Project" button in the toolbar.

2. In the New Project wizard, expand the Java category and select Java Application as shown in the figure below. Then click Next.
[.feature]
--
image::images/proj-wizard-small.png[role="left", link="images/proj-wizard.png"]
--
*Note:* The first time you create a new Java project, you will be prompted to download and enable support for Java. Follow the prompts and install as recommended by the wizard.
[start=3]
3. In the Name and Location page of the wizard, do the following (as shown in the figure below):
* In the Project Name field, type `HelloWorldApp`.
* In the Create Main Class field, type `helloworldapp.HelloWorldApp`.
[.feature]
--
image::images/proj-wizard2-small.png[role="left", link="images/proj-wizard2.png"]
--
Click Finish.

The project is created and opened. You should see the following components:

* Projects window: Contains a tree view of the components of the project, including source files, libraries that your code depends on, and so on.
* Source Editor: Contains files, where most of your work will be done, currently with a file called `HelloWorldApp` open.
* Navigator: Useful for quickly navigate between elements within the selected class.
[.feature]
--
image::images/proj-opened-small.png[role="left", link="images/proj-opened.png"]
--

=== Adding Code to the Generated Source File

Because you have left the Create Main Class checkbox selected in the New Project wizard, the IDE has created a skeleton main class for you. You can add the "Hello World!" message to the skeleton code by replacing the line:


[source,java]
----

// TODO code application logic here
        
----

with the line:


[source,java]
----

System.out.println("Hello World!");
        
----

Save the change by choosing File > Save.

The file should look as shown below.

[.feature]
--
image::images/helloworldapp-open-small.png[role="left", link="images/helloworldapp-open.png"]
--

=== Compiling and Running the Program

Because of the IDE's Compile on Save feature, you do not have to manually compile your project in order to run it in the IDE. When you save a Java source file, the IDE automatically compiles it.

The Compile on Save feature can be turned off in the Project Properties window. Right-click your project, select Properties. In the Properties window, choose the Compiling tab. The Compile on Save checkbox is right at the top. Note that in the Project Properties window you can configure numerous settings for your project: project libraries, packaging, building, running, etc.

*To run the program:*

* Choose Run > Run Project.

The next figure shows what you should now see.

image::images/run-output.png[]

Congratulations! Your program works!

If there are compilation errors, they are marked with red glyphs in the left and right margins of the Source Editor. The glyphs in the left margin indicate errors for the corresponding lines. The glyphs in the right margin show all of the areas of the file that have errors, including errors in lines that are not visible. You can mouse over an error mark to get a description of the error. You can click a glyph in the right margin to jump to the line with the error.

=== Building and Deploying the Application

Once you have written and test run your application, you can use the Clean and Build command to build your application for deployment. When you use the Clean and Build command, the IDE runs a build script that performs the following tasks:

* Deletes any previously compiled files and other build outputs.
* Recompiles the application and builds a JAR file containing the compiled files.

*To build your application:*

* Choose Run > Clean and Build Project.

You can view the build outputs by opening the Files window and expanding the  ``HelloWorldApp``  node. The compiled bytecode file `HelloWorldApp.class` is within the `build/classes/helloworldapp` subnode. A deployable JAR file that contains the `HelloWorldApp.class` is within the `dist` node.

image::images/files-window.png[]

You now know how to accomplish the most common programming tasks in the IDE.

